import os
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes
from gpx_processor import process_gpx_file as process_gpx
from dotenv import load_dotenv

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env

async def gpx_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        document = update.message.document

        if not document or not document.file_name.endswith(".gpx"):
            await update.message.reply_text("üìÑ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ GPX-—Ñ–∞–π–ª.")
            return

        file = await document.get_file()
        local_path = f"/tmp/{document.file_name}"
        await file.download_to_drive(custom_path=local_path)

        await update.message.reply_text("üì• –§–∞–π–ª –ø–æ–ª—É—á–µ–Ω! –ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑...")

        report, image_buffer = process_gpx(local_path)

        if image_buffer:
            await update.message.reply_text(report)
            await update.message.reply_photo(photo=image_buffer, caption="üìà –ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–∞ –ø–æ –¥–∏—Å—Ç–∞–Ω—Ü–∏–∏")
        else:
            await update.message.reply_text(report)

        os.remove(local_path)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        print("–û—à–∏–±–∫–∞:", e)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
app = ApplicationBuilder().token(os.environ["BOT_TOKEN"]).build()
app.add_handler(MessageHandler(filters.Document.FileExtension("gpx"), gpx_handler))
app.run_polling()
