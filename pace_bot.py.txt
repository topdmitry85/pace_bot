import os
import io
import gpxpy
import gpxpy.gpx
import numpy as np
import matplotlib.pyplot as plt
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, CommandHandler, ContextTypes, filters

BOT_TOKEN = "7704340239:AAFFBXNGHOS2pmZgWeF-2icBieGWMkHsPTg"

def calculate_pace_sko(gpx_data, segment_length=25):
    gpx = gpxpy.parse(gpx_data)
    points = []
    for track in gpx.tracks:
        for segment in track.segments:
            points.extend(segment.points)

    if len(points) < 2:
        return None, None, None

    distances = []
    times = []
    cumulative_distance = 0.0
    cumulative_time = 0.0

    segment_paces = []
    segment_dist = 0.0
    segment_time = 0.0

    for i in range(1, len(points)):
        d = points[i-1].distance_3d(points[i])
        t = (points[i].time - points[i-1].time).total_seconds()

        if t <= 0:
            continue

        segment_dist += d
        segment_time += t

        if segment_dist >= segment_length:
            pace = (segment_time / 60) / (segment_dist / 1000)
            segment_paces.append(pace)
            segment_dist = 0
            segment_time = 0

    if not segment_paces:
        return None, None, None

    mean_pace = np.mean(segment_paces)
    std_dev = np.std(segment_paces)

    return segment_paces, mean_pace, std_dev

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—à–ª–∏ –º–Ω–µ GPX-—Ñ–∞–π–ª, –∏ —è —Ä–∞—Å—Å—á–∏—Ç–∞—é –°–ö–û —Ç–µ–º–ø–∞.")

async def handle_gpx(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message.document:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ GPX-—Ñ–∞–π–ª.")
        return

    file = await update.message.document.get_file()
    file_data = await file.download_as_bytearray()

    gpx_data = io.BytesIO(file_data)
    segment_paces, mean_pace, std_dev = calculate_pace_sko(gpx_data)

    if segment_paces is None:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å GPX.")
        return

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.figure(figsize=(10, 5))
    plt.plot(segment_paces, label='–¢–µ–º–ø (–º–∏–Ω/–∫–º)')
    plt.axhline(y=mean_pace, color='r', linestyle='--', label='–°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø')
    plt.title("–ì—Ä–∞—Ñ–∏–∫ —Ç–µ–º–ø–∞")
    plt.xlabel("–°–µ–≥–º–µ–Ω—Ç")
    plt.ylabel("–¢–µ–º–ø (–º–∏–Ω/–∫–º)")
    plt.legend()
    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()

    sko_text = f"üìè –°–ö–û —Ç–µ–º–ø–∞: {std_dev:.2f} –º–∏–Ω/–∫–º\nüü∞ –°—Ä–µ–¥–Ω–∏–π —Ç–µ–º–ø: {mean_pace:.2f} –º–∏–Ω/–∫–º"
    await update.message.reply_photo(photo=buf, caption=sko_text)

def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.FILE_EXTENSION("gpx"), handle_gpx))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞—é GPX-—Ñ–∞–π–ª—ã...")
    app.run_polling()

if __name__ == "__main__":
    main()